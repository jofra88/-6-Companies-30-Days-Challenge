/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
    string ans="";
    if(!root)
    return ans;
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty())
    {
        TreeNode* node=q.front();
        q.pop();
        if(!node)
        ans+="null,";
        else
        {
            ans+=to_string(node->val);
            ans+=",";
            q.push(node->left);
            q.push(node->right);
        }
    }  
    cout<<ans<<endl;
    return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
    if(data=="")
    return NULL;  
    stringstream s(data);
    string str;
    getline(s,str,',');
    TreeNode* root=new TreeNode(stoi(str));
    queue<TreeNode*> q;
    q.push(root);
    while(!q.empty() )
    {
        TreeNode* node=q.front();
        q.pop();
        getline(s,str,',');
        if(str=="null")
        {
            node->left=NULL;
        }
        else    
        {
            TreeNode* node2=new TreeNode(stoi(str));
            node->left=node2;
            q.push(node->left);
        }
        getline(s,str,',');
        if(str=="null")
        {
            node->right=NULL;
        }
        else    
        {
            TreeNode* node3=new TreeNode(stoi(str));
            node->right=node3;
            q.push(node->right);
        }
    }  
    return root;    
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));